#!/usr/bin/env python

import subprocess, time

def run(cmd):
	try:
		return subprocess.getoutput(cmd)
	except:
		return None


class Widget:
	def fg(self, color, text):
		return '%{F' + color + '}' + text + '%{F-}'

	def bg(self, color, text):
		return '%{B' + color + '}' + text + '%{B-}'


class Clock(Widget):
	def render(self):
		return run('date +%r')

class WS(Widget):
	def __init__(self):
		self.workspaces = run('bspc query -D').split('\n')
		self.switcher = ''
		self.icon = ''
		for workspace in self.workspaces:
			if workspace == run('bspc query -D -d'):
				color = '#66cccc'
			else:
				color = '#d3d0c8'
			self.switcher += self.fg(color, '%{A:bspc desktop -f ' + workspace + ':}' + self.icon + '%{A}')
			self.switcher += ' '
	def render(self):
		return self.switcher

class Music(Widget):
	def __init__(self):
		self.forward = '  '
		self.back = '  '
		self.play = '  '
		self.pause = '  '
	def render(self):
		return '%{A:mpc prev:}' + self.back + '%{A}%{A:mpc play:}' + self.play + '%{A}%{A:mpc pause:}' + self.pause + '%{A}%{A:mpc next:}' + self.forward + '%{A}'
		
line = ''
cl = Clock()
ws = WS()
mu = Music()
widgets = [mu, '%{c}', ws, '%{r}', cl]
for widget in widgets:
	line += ' '
	if isinstance(widget, Widget):
		line += widget.render()
	else:
		line += widget
	line += ' '
print(line)
